1) Make a function where you instead of checking all if **av as in av[i][j] you will instead go through av[1][j]
and see if all the numbers are valid

2) So now that you have parsed you want to store it in the linekd list all the numbers onto stack a
	here is where in ur linked list you atoi each str into ur struct which is the linked list 
	the main struct will be called t_pushswap

3) after storing in stack a you want to go through all the numbers and give them indexes
EXAMPLE:
	17 59 -18 58 138 123 60
	it should look like this after
	1 3 0 2 6 5 4

	so you will store them likewise
	a = new_list(ft_atoi(strs[0]));
	i = 1;
	so new_list is a function that will take the split str but only one index as atoied and then return a pointer to the node of the linked list
	so now since we have the start you will make a function that will be called add_back_lst() that will also take atoi(strs[i]); but this time its
	i cuz it will be in a loop so we fill up the stack
	next in each node you have the index so you will have to go through it and before this you will need to initalize all the other values so index
	will be 0 in the struct
	then you will manipulate index by compare it to the rest of the list and everytime you find a number smaller than it you will do index++;

4) after rearranging the numbers you can finally start the sorting algorithm radix!!!!
	the way it works is by using the binary of the number thats why we indexed them
	so a 0 would be 00000000 8 bits
	and 1 would be 00000001
	and 2 would be 00000010
	and 12 would be 00001100

4.5) HOW RADIX WORKS
	the way it works is it will first look for the furthest binary number so 00000000 we have 8 bits right but since we want it to be fast we want
	to know where the first number will appear. 00010000 right so try figuring out this problem urself.

	so we find every number that has 1 in that bit and push it onto stack b then you look at the next bit and if its a 0 you will push it back onto stack a from b
	and if its a 1 you rotate it to the top of stack b since its the biggest number

5) ur done
